{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Mashgin - Code Challenge This project is artu-hnrq 's code challenge result for a Senior Software Engineer - Full-Stack position in Mashgin . Overview The proposal is to model and develop a restaurant ordering system composed by a frontend client application and a backend API service, allowing users to select available items from a menu and process their order payment. You can refer to the full challenge description for more details. you also maybe want to check the whole implementation description in detailed solution . Or yet examine the source code thoroughly. Maintenance This project is maintained by the author, @artu-hnrq . It is a proof-of-concept and only intend to be a limited example. License This project is published under the permissions established by GNU General Public License v3.0 .","title":"Home"},{"location":"index.html#mashgin-code-challenge","text":"This project is artu-hnrq 's code challenge result for a Senior Software Engineer - Full-Stack position in Mashgin .","title":"Mashgin - Code Challenge"},{"location":"index.html#overview","text":"The proposal is to model and develop a restaurant ordering system composed by a frontend client application and a backend API service, allowing users to select available items from a menu and process their order payment. You can refer to the full challenge description for more details. you also maybe want to check the whole implementation description in detailed solution . Or yet examine the source code thoroughly.","title":"Overview"},{"location":"index.html#maintenance","text":"This project is maintained by the author, @artu-hnrq . It is a proof-of-concept and only intend to be a limited example.","title":"Maintenance"},{"location":"index.html#license","text":"This project is published under the permissions established by GNU General Public License v3.0 .","title":"License"},{"location":"comunication.html","text":"Comunication layer The data transfer between the front end application and backend services is made through an REST API. Endpoints The developed API exposes endpoints, under / path, in line with the following specification: menu/ Request the list of dishes offered by the restaurant Allowed HTTP methods Required inputs Optional inputs Authentication required Permission required GET - - - - API clients There are several ways to interact with the API. Django REST Framework itself will render a GUI if you access some endpoint via browser. There you'll be able to check more information over that endpoint and even trigger requests. You also can use Postman HTTP client to do so. Inside [repository][-2]'s data folder you'll find its workspace-configuration directory, which can be imported to set up the context used during development. Or you can also ingress into [project's Postman configured workspace][>3].","title":"Comunication layer"},{"location":"comunication.html#comunication-layer","text":"The data transfer between the front end application and backend services is made through an REST API.","title":"Comunication layer"},{"location":"comunication.html#endpoints","text":"The developed API exposes endpoints, under / path, in line with the following specification:","title":"Endpoints"},{"location":"comunication.html#menu","text":"Request the list of dishes offered by the restaurant Allowed HTTP methods Required inputs Optional inputs Authentication required Permission required GET - - - -","title":"menu/"},{"location":"comunication.html#api-clients","text":"There are several ways to interact with the API. Django REST Framework itself will render a GUI if you access some endpoint via browser. There you'll be able to check more information over that endpoint and even trigger requests. You also can use Postman HTTP client to do so. Inside [repository][-2]'s data folder you'll find its workspace-configuration directory, which can be imported to set up the context used during development. Or you can also ingress into [project's Postman configured workspace][>3].","title":"API clients"},{"location":"configuration.html","text":"Configuration Project execution can be configured through environment variables. Below each expected variable is described. General ENVIRONMENT It defines instance's running mode , impacting in default value supplied for other configurations, as well as in expected environment variables. See more details in each configuration description. type default string 'DEVELOPMENT' Database When ENVIRONMENT is set to 'PRODUCTION' , application expects the following configurations. Otherwise, it uses a not-configurable sqlite3 database. DB_ENGINE Defines Django's database ENGINE setting type default string 'django.db.backends.postgresql_psycopg2' DB_NAME Defines Django's database NAME setting type default string required DB_USERNAME Defines Django's database USER setting type default string required DB_PASSWORD Defines Django's database PASSWORD setting type default string required DB_HOST Defines Django's database HOST setting type default string required DB_PORT Defines Django's database PORT setting type default string required Django settings Beside some, most of the following configuration variables are direct forwarded to same-name Django settings. And their effect over launched service can be found in proper documentation . ALLOWED_HOSTS type default space-separated list '*' DEBUG type default bool ENVIRONMENT != 'PRODUCTION' SECRET_KEY type default string Dynamically generated through django.core.management.utils.get_random_secret_key function LOADDATA Define fixture files to be loaded after application boots up type default space-separated list '' Development management Environment variables are also used by Make in order to provide flexibility to its provisioned development management facilities. Some of them are described above. PROJECT_NAME Used to compose make outputs type default string Dynamically retrieved by project root directory name PYTHON Define where to find the python3 binary to be used in Make targets. If supplied value not refer to the full path of an executable script, a python virtual environment will be created inside the current working directory. type default path $(VENV_ROOT)/bin/python3 VENV Define if python virtual environment should be used and its folder name type default string 'venv'","title":"Configuration"},{"location":"configuration.html#configuration","text":"Project execution can be configured through environment variables. Below each expected variable is described.","title":"Configuration"},{"location":"configuration.html#general","text":"","title":"General"},{"location":"configuration.html#environment","text":"It defines instance's running mode , impacting in default value supplied for other configurations, as well as in expected environment variables. See more details in each configuration description. type default string 'DEVELOPMENT'","title":"ENVIRONMENT"},{"location":"configuration.html#database","text":"When ENVIRONMENT is set to 'PRODUCTION' , application expects the following configurations. Otherwise, it uses a not-configurable sqlite3 database.","title":"Database"},{"location":"configuration.html#db_engine","text":"Defines Django's database ENGINE setting type default string 'django.db.backends.postgresql_psycopg2'","title":"DB_ENGINE"},{"location":"configuration.html#db_name","text":"Defines Django's database NAME setting type default string required","title":"DB_NAME"},{"location":"configuration.html#db_username","text":"Defines Django's database USER setting type default string required","title":"DB_USERNAME"},{"location":"configuration.html#db_password","text":"Defines Django's database PASSWORD setting type default string required","title":"DB_PASSWORD"},{"location":"configuration.html#db_host","text":"Defines Django's database HOST setting type default string required","title":"DB_HOST"},{"location":"configuration.html#db_port","text":"Defines Django's database PORT setting type default string required","title":"DB_PORT"},{"location":"configuration.html#django-settings","text":"Beside some, most of the following configuration variables are direct forwarded to same-name Django settings. And their effect over launched service can be found in proper documentation .","title":"Django settings"},{"location":"configuration.html#allowed_hosts","text":"type default space-separated list '*'","title":"ALLOWED_HOSTS"},{"location":"configuration.html#debug","text":"type default bool ENVIRONMENT != 'PRODUCTION'","title":"DEBUG"},{"location":"configuration.html#secret_key","text":"type default string Dynamically generated through django.core.management.utils.get_random_secret_key function","title":"SECRET_KEY"},{"location":"configuration.html#loaddata","text":"Define fixture files to be loaded after application boots up type default space-separated list ''","title":"LOADDATA"},{"location":"configuration.html#development-management","text":"Environment variables are also used by Make in order to provide flexibility to its provisioned development management facilities. Some of them are described above.","title":"Development management"},{"location":"configuration.html#project_name","text":"Used to compose make outputs type default string Dynamically retrieved by project root directory name","title":"PROJECT_NAME"},{"location":"configuration.html#python","text":"Define where to find the python3 binary to be used in Make targets. If supplied value not refer to the full path of an executable script, a python virtual environment will be created inside the current working directory. type default path $(VENV_ROOT)/bin/python3","title":"PYTHON"},{"location":"configuration.html#venv","text":"Define if python virtual environment should be used and its folder name type default string 'venv'","title":"VENV"},{"location":"management.html","text":"Development management During application development some tasks are repeatedly executed, and most time they consist in run multiple commands in shell. GNU Make is a command line tool that can help one into DRY , organize execution management actions and make them flexible and shareable. The following Make targets have been implemented to facilitate the application development and execution processes management. Run make <target> from your preferred shell to execute the referenced target task. General Target description help Show all available targets and their brief description init Configure execution environment clean Delete all generated files veryclean Uninstall execution environment completely Backend services Target description run Run backend services prepare Prepare database to execution compile Process source code into an executable program test Test application reset_migrations Delete all Django apps' migrations Documentation Target description docs Build documentation read Serve documentation publish Publish documentation into Github Pages","title":"Development management"},{"location":"management.html#development-management","text":"During application development some tasks are repeatedly executed, and most time they consist in run multiple commands in shell. GNU Make is a command line tool that can help one into DRY , organize execution management actions and make them flexible and shareable. The following Make targets have been implemented to facilitate the application development and execution processes management. Run make <target> from your preferred shell to execute the referenced target task.","title":"Development management"},{"location":"management.html#general","text":"Target description help Show all available targets and their brief description init Configure execution environment clean Delete all generated files veryclean Uninstall execution environment completely","title":"General"},{"location":"management.html#backend-services","text":"Target description run Run backend services prepare Prepare database to execution compile Process source code into an executable program test Test application reset_migrations Delete all Django apps' migrations","title":"Backend services"},{"location":"management.html#documentation","text":"Target description docs Build documentation read Serve documentation publish Publish documentation into Github Pages","title":"Documentation"},{"location":"setup.html","text":"Project Setup Let's get this app running! Getting started Requirements It will be necessary to have Git and Python installed $ git --version git version 2.25.1 $ python --version Python 3.8.5 Additionally, Bash and Make will allow you to get further $ echo $BASH_VERSION 5.0.17(1)-release $ make --version GNU Make 4.2.1 Installation First of all, clone this repo locally $ git clone git@github.com:artu-hnrq/mishmash_kitchen.git Development environment Then, to set up development environment, go inside the downloaded folder and run $ make init $ . venv/bin/activate","title":"Project setup"},{"location":"setup.html#project-setup","text":"Let's get this app running!","title":"Project Setup"},{"location":"setup.html#getting-started","text":"","title":"Getting started"},{"location":"setup.html#requirements","text":"It will be necessary to have Git and Python installed $ git --version git version 2.25.1 $ python --version Python 3.8.5 Additionally, Bash and Make will allow you to get further $ echo $BASH_VERSION 5.0.17(1)-release $ make --version GNU Make 4.2.1","title":"Requirements"},{"location":"setup.html#installation","text":"First of all, clone this repo locally $ git clone git@github.com:artu-hnrq/mishmash_kitchen.git","title":"Installation"},{"location":"setup.html#development-environment","text":"Then, to set up development environment, go inside the downloaded folder and run $ make init $ . venv/bin/activate","title":"Development environment"},{"location":"solution.html","text":"Detailed solution Convention compliance This project was developed taking into account the following standards: Repository maintenance Readme Driven Development Choose a License Semantic Versioning Conventional Commits Keep a Changelog Repo status Development guidelines Don't repeat yourself Twelve-factor app Used technologies The next technologies were used during project conception, development, test or deploy: Development tools Git for code versioning control Make for development process management PyCharm as integrated development environment Github for code integration management Backend services stack Python as programming language Django as web service application Django REST Framework for API architecture Python Decouple for environment variables consumption Django Probes for database connection waiting Deployment architecture Gunicorn as web server gateway interface Persistence engines PostrgreSQL as object-relational database system SQLite as alternative lightweight SQL database Documentation aparatus Markdown for text formatting Mkdocs as static site generator Project specifications Here some descriptions about this project: Folder structure . \u251c\u2500\u2500 .git/ Version control system folder \u251c\u2500\u2500 .gitignore VCS ignored files manifest \u251c\u2500\u2500 CHANGELOG.md Release notes description \u251c\u2500\u2500 LICENSE License file \u251c\u2500\u2500 Makefile Development management facilities \u251c\u2500\u2500 README.md Repo readme document \u2514\u2500\u2500 api/ \u251c\u2500\u2500 __project__/ Django project root folder \u251c\u2500\u2500 manage.py Django's command-line utility \u251c\u2500\u2500 requirements.txt Python dependency descriptor \u2514\u2500\u2500 fixtures/ Preset initial data \u2514\u2500\u2500 data/ \u2514\u2500\u2500 img/ Project level images \u2514\u2500\u2500 run/ PyCharm run configuration \u2514\u2500\u2500 docs/ Documentation root folder \u251c\u2500\u2500 mkdocs.yml MkDocs configuration file \u2514\u2500\u2500 pages/ \u251c\u2500\u2500 challenge.pdf Original challenge description \u251c\u2500\u2500 configuration.md Application execution configuration \u251c\u2500\u2500 index.md Documentation home page \u251c\u2500\u2500 management.md Development management summary \u251c\u2500\u2500 setup.md Application setup instructions \u2514\u2500\u2500 solution.md Detailed solution report","title":"Solution"},{"location":"solution.html#detailed-solution","text":"","title":"Detailed solution"},{"location":"solution.html#convention-compliance","text":"This project was developed taking into account the following standards:","title":"Convention compliance"},{"location":"solution.html#repository-maintenance","text":"Readme Driven Development Choose a License Semantic Versioning Conventional Commits Keep a Changelog Repo status","title":"Repository maintenance"},{"location":"solution.html#development-guidelines","text":"Don't repeat yourself Twelve-factor app","title":"Development guidelines"},{"location":"solution.html#used-technologies","text":"The next technologies were used during project conception, development, test or deploy:","title":"Used technologies"},{"location":"solution.html#development-tools","text":"Git for code versioning control Make for development process management PyCharm as integrated development environment Github for code integration management","title":"Development tools"},{"location":"solution.html#backend-services-stack","text":"Python as programming language Django as web service application Django REST Framework for API architecture Python Decouple for environment variables consumption Django Probes for database connection waiting","title":"Backend services stack"},{"location":"solution.html#deployment-architecture","text":"Gunicorn as web server gateway interface","title":"Deployment architecture"},{"location":"solution.html#persistence-engines","text":"PostrgreSQL as object-relational database system SQLite as alternative lightweight SQL database","title":"Persistence engines"},{"location":"solution.html#documentation-aparatus","text":"Markdown for text formatting Mkdocs as static site generator","title":"Documentation aparatus"},{"location":"solution.html#project-specifications","text":"Here some descriptions about this project:","title":"Project specifications"},{"location":"solution.html#folder-structure","text":". \u251c\u2500\u2500 .git/ Version control system folder \u251c\u2500\u2500 .gitignore VCS ignored files manifest \u251c\u2500\u2500 CHANGELOG.md Release notes description \u251c\u2500\u2500 LICENSE License file \u251c\u2500\u2500 Makefile Development management facilities \u251c\u2500\u2500 README.md Repo readme document \u2514\u2500\u2500 api/ \u251c\u2500\u2500 __project__/ Django project root folder \u251c\u2500\u2500 manage.py Django's command-line utility \u251c\u2500\u2500 requirements.txt Python dependency descriptor \u2514\u2500\u2500 fixtures/ Preset initial data \u2514\u2500\u2500 data/ \u2514\u2500\u2500 img/ Project level images \u2514\u2500\u2500 run/ PyCharm run configuration \u2514\u2500\u2500 docs/ Documentation root folder \u251c\u2500\u2500 mkdocs.yml MkDocs configuration file \u2514\u2500\u2500 pages/ \u251c\u2500\u2500 challenge.pdf Original challenge description \u251c\u2500\u2500 configuration.md Application execution configuration \u251c\u2500\u2500 index.md Documentation home page \u251c\u2500\u2500 management.md Development management summary \u251c\u2500\u2500 setup.md Application setup instructions \u2514\u2500\u2500 solution.md Detailed solution report","title":"Folder structure"}]}